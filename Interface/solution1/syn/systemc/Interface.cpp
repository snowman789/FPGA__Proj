// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Interface.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Interface::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<8> Interface::ap_const_lv8_FF = "11111111";
const sc_lv<8> Interface::ap_const_lv8_0 = "00000000";
const sc_logic Interface::ap_const_logic_0 = sc_dt::Log_0;
const bool Interface::ap_const_boolean_1 = true;

Interface::Interface(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_XY_Blue_V);
    sensitive << ( ap_start );

    SC_METHOD(thread_XY_Green_V);
    sensitive << ( ap_start );

    SC_METHOD(thread_XY_Red_V);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Interface_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, y_V, "(port)y_V");
    sc_trace(mVcdFile, XY_Red_V, "(port)XY_Red_V");
    sc_trace(mVcdFile, XY_Green_V, "(port)XY_Green_V");
    sc_trace(mVcdFile, XY_Blue_V, "(port)XY_Blue_V");
    sc_trace(mVcdFile, lose, "(port)lose");
    sc_trace(mVcdFile, time_remaining_V, "(port)time_remaining_V");
    sc_trace(mVcdFile, verify1, "(port)verify1");
    sc_trace(mVcdFile, verify2, "(port)verify2");
    sc_trace(mVcdFile, verify3, "(port)verify3");
#endif

    }
    mHdltvinHandle.open("Interface.hdltvin.dat");
    mHdltvoutHandle.open("Interface.hdltvout.dat");
}

Interface::~Interface() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Interface::thread_XY_Blue_V() {
    XY_Blue_V = ap_const_lv8_FF;
}

void Interface::thread_XY_Green_V() {
    XY_Green_V = ap_const_lv8_FF;
}

void Interface::thread_XY_Red_V() {
    XY_Red_V = ap_const_lv8_0;
}

void Interface::thread_ap_done() {
    ap_done = ap_start.read();
}

void Interface::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void Interface::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void Interface::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V\" :  \"" << x_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y_V\" :  \"" << y_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"XY_Red_V\" :  \"" << XY_Red_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"XY_Green_V\" :  \"" << XY_Green_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"XY_Blue_V\" :  \"" << XY_Blue_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"lose\" :  \"" << lose.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"time_remaining_V\" :  \"" << time_remaining_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"verify1\" :  \"" << verify1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"verify2\" :  \"" << verify2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"verify3\" :  \"" << verify3.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

