-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Interface2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (9 downto 0);
    y_V : IN STD_LOGIC_VECTOR (9 downto 0);
    XY_Red_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    XY_Green_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    XY_Blue_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    lose : IN STD_LOGIC;
    time_remaining_V : IN STD_LOGIC_VECTOR (9 downto 0);
    verify1 : IN STD_LOGIC;
    verify2 : IN STD_LOGIC;
    verify3 : IN STD_LOGIC );
end;


architecture behav of Interface2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Interface2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.763500,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=22,HLS_SYN_LUT=114,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_C8 : STD_LOGIC_VECTOR (9 downto 0) := "0011001000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal or_cond_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge2_fu_104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal XY_Red_V_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal storemerge1_cast_cas_fu_113_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal XY_Blue_V_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal storemerge_cast_fu_128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal XY_Green_V_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_1_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_1_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_94_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_fu_137_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    XY_Blue_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                XY_Blue_V_preg(3) <= '0';
                XY_Blue_V_preg(6) <= '0';
                XY_Blue_V_preg(7) <= '0';
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        XY_Blue_V_preg(3) <= storemerge1_cast_cas_fu_113_p3(3);                    XY_Blue_V_preg(7 downto 6) <= storemerge1_cast_cas_fu_113_p3(7 downto 6);
                end if; 
            end if;
        end if;
    end process;


    XY_Green_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                XY_Green_V_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    XY_Green_V_preg <= storemerge_cast_fu_128_p3;
                end if; 
            end if;
        end if;
    end process;


    XY_Red_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                XY_Red_V_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    XY_Red_V_preg <= storemerge2_fu_104_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                or_cond_reg_159 <= or_cond_fu_153_p2;
            end if;
        end if;
    end process;
    XY_Blue_V_preg(2 downto 0) <= "000";
    XY_Blue_V_preg(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    XY_Blue_V_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_reg_159, ap_CS_fsm_state2, storemerge1_cast_cas_fu_113_p3, XY_Blue_V_preg)
    begin
        if (((or_cond_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            XY_Blue_V <= ap_const_lv8_FF;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            XY_Blue_V <= storemerge1_cast_cas_fu_113_p3;
        else 
            XY_Blue_V <= XY_Blue_V_preg;
        end if; 
    end process;


    XY_Green_V_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_reg_159, ap_CS_fsm_state2, storemerge_cast_fu_128_p3, XY_Green_V_preg)
    begin
        if (((or_cond_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            XY_Green_V <= ap_const_lv8_0;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            XY_Green_V <= storemerge_cast_fu_128_p3;
        else 
            XY_Green_V <= XY_Green_V_preg;
        end if; 
    end process;


    XY_Red_V_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_reg_159, storemerge2_fu_104_p3, XY_Red_V_preg, ap_CS_fsm_state2)
    begin
        if (((or_cond_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            XY_Red_V <= ap_const_lv8_0;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            XY_Red_V <= storemerge2_fu_104_p3;
        else 
            XY_Red_V <= XY_Red_V_preg;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_1_fu_122_p2 <= (tmp_1_fu_98_p2 xor ap_const_lv1_1);
    or_cond_fu_153_p2 <= (tmp_5_fu_147_p2 and tmp_4_fu_141_p2);
    storemerge1_cast_cas_fu_113_p3 <= 
        ap_const_lv8_0 when (tmp_1_fu_98_p2(0) = '1') else 
        ap_const_lv8_C8;
    storemerge2_fu_104_p3 <= 
        ap_const_lv8_FF when (tmp_1_fu_98_p2(0) = '1') else 
        ap_const_lv8_0;
    storemerge_cast_fu_128_p3 <= 
        ap_const_lv8_FF when (not_tmp_1_fu_122_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_1_fu_98_p2 <= "1" when (unsigned(x_V) > unsigned(ap_const_lv10_C8)) else "0";
    tmp_3_cast_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_94_p1),10));
    tmp_4_fu_141_p2 <= "1" when (unsigned(tmp_3_cast_fu_137_p1) > unsigned(x_V)) else "0";
    tmp_5_fu_147_p2 <= "1" when (unsigned(y_V) < unsigned(ap_const_lv10_64)) else "0";
    tmp_fu_94_p1 <= time_remaining_V(9 - 1 downto 0);
end behav;
