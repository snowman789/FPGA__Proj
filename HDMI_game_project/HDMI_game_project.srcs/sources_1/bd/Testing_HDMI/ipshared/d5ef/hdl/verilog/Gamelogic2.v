// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Gamelogic2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.285250,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=32,HLS_SYN_LUT=108,HLS_VERSION=2018_3}" *)

module Gamelogic2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rst,
        btn1,
        btn2,
        btn3,
        lose,
        time_remaining_out_V,
        verify1_out,
        verify2_out,
        verify3_out
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   rst;
input   btn1;
input   btn2;
input   btn3;
input   lose;
output  [9:0] time_remaining_out_V;
input   verify1_out;
input   verify2_out;
input   verify3_out;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] time_remaining;
wire   [31:0] val_assign_cast_fu_89_p1;
wire   [30:0] tmp_fu_57_p1;
wire   [31:0] tmp_4_fu_61_p2;
wire   [0:0] tmp_1_fu_73_p3;
wire   [30:0] tmp_4_cast_fu_67_p2;
wire   [30:0] val_assign_fu_81_p3;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 time_remaining = 32'd640;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        time_remaining[30 : 0] <= val_assign_cast_fu_89_p1[30 : 0];
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign time_remaining_out_V = val_assign_fu_81_p3[9:0];

assign tmp_1_fu_73_p3 = tmp_4_fu_61_p2[32'd31];

assign tmp_4_cast_fu_67_p2 = ($signed(31'd2147483647) + $signed(tmp_fu_57_p1));

assign tmp_4_fu_61_p2 = ($signed(32'd4294967295) + $signed(time_remaining));

assign tmp_fu_57_p1 = time_remaining[30:0];

assign val_assign_cast_fu_89_p1 = val_assign_fu_81_p3;

assign val_assign_fu_81_p3 = ((tmp_1_fu_73_p3[0:0] === 1'b1) ? 31'd640 : tmp_4_cast_fu_67_p2);

always @ (posedge ap_clk) begin
    time_remaining[31] <= 1'b0;
end

endmodule //Gamelogic2
