// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Interface2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.990000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=43,HLS_SYN_LUT=231,HLS_VERSION=2018_3}" *)

module Interface2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        y_V,
        XY_Red_V,
        XY_Green_V,
        XY_Blue_V,
        center_line_V,
        right_r
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] x_V;
input  [9:0] y_V;
output  [7:0] XY_Red_V;
output  [7:0] XY_Green_V;
output  [7:0] XY_Blue_V;
input  [11:0] center_line_V;
input   right_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] XY_Red_V;
reg[7:0] XY_Green_V;
reg[7:0] XY_Blue_V;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_96_p2;
reg   [0:0] tmp_reg_179;
wire   [0:0] tmp_2_fu_125_p2;
reg   [0:0] tmp_2_reg_186;
wire   [0:0] tmp_3_fu_141_p2;
reg   [0:0] tmp_3_reg_190;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_4_cast_fu_146_p1;
reg   [11:0] tmp_4_cast_reg_194;
wire   [0:0] tmp_6_fu_149_p2;
reg   [0:0] tmp_6_reg_199;
wire   [0:0] tmp_7_fu_154_p2;
reg   [0:0] tmp_7_reg_203;
wire    ap_CS_fsm_state3;
wire   [7:0] storemerge5_cast_fu_114_p3;
reg   [7:0] XY_Red_V_preg;
wire   [0:0] tmp_1_fu_102_p2;
wire   [7:0] storemerge4_fu_131_p3;
wire    ap_CS_fsm_state4;
reg   [7:0] XY_Blue_V_preg;
reg   [7:0] XY_Green_V_preg;
wire   [0:0] not_right_fu_108_p0;
wire   [0:0] not_right_fu_108_p2;
wire   [0:0] storemerge4_fu_131_p0;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 XY_Red_V_preg = 8'd0;
#0 XY_Blue_V_preg = 8'd0;
#0 XY_Green_V_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        XY_Blue_V_preg <= 8'd0;
    end else begin
        if (((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            XY_Blue_V_preg <= 8'd0;
        end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            XY_Blue_V_preg <= storemerge4_fu_131_p3;
        end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            XY_Blue_V_preg <= storemerge5_cast_fu_114_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        XY_Green_V_preg <= 8'd0;
    end else begin
        if (((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            XY_Green_V_preg <= 8'd0;
        end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            XY_Green_V_preg <= storemerge4_fu_131_p3;
        end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            XY_Green_V_preg <= storemerge5_cast_fu_114_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        XY_Red_V_preg <= 8'd0;
    end else begin
        if (((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            XY_Red_V_preg <= 8'd255;
        end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            XY_Red_V_preg <= storemerge4_fu_131_p3;
        end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            XY_Red_V_preg <= storemerge5_cast_fu_114_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_2_reg_186 <= tmp_2_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_190 <= tmp_3_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_cast_reg_194[9 : 0] <= tmp_4_cast_fu_146_p1[9 : 0];
        tmp_6_reg_199 <= tmp_6_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_reg_203 <= tmp_7_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_179 <= tmp_fu_96_p2;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_203 == 1'd1) & (tmp_3_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        XY_Blue_V = 8'd0;
    end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Blue_V = storemerge4_fu_131_p3;
    end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Blue_V = storemerge5_cast_fu_114_p3;
    end else begin
        XY_Blue_V = XY_Blue_V_preg;
    end
end

always @ (*) begin
    if (((tmp_7_reg_203 == 1'd1) & (tmp_3_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        XY_Green_V = 8'd255;
    end else if (((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        XY_Green_V = 8'd0;
    end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Green_V = storemerge4_fu_131_p3;
    end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Green_V = storemerge5_cast_fu_114_p3;
    end else begin
        XY_Green_V = XY_Green_V_preg;
    end
end

always @ (*) begin
    if (((tmp_7_reg_203 == 1'd1) & (tmp_3_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        XY_Red_V = 8'd0;
    end else if (((tmp_6_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        XY_Red_V = 8'd255;
    end else if (((tmp_2_reg_186 == 1'd1) & (tmp_reg_179 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Red_V = storemerge4_fu_131_p3;
    end else if (((ap_start == 1'b1) & (tmp_1_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Red_V = storemerge5_cast_fu_114_p3;
    end else begin
        XY_Red_V = XY_Red_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_3_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign not_right_fu_108_p0 = right_r;

assign not_right_fu_108_p2 = (not_right_fu_108_p0 ^ 1'd1);

assign storemerge4_fu_131_p0 = right_r;

assign storemerge4_fu_131_p3 = ((storemerge4_fu_131_p0[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign storemerge5_cast_fu_114_p3 = ((not_right_fu_108_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp_1_fu_102_p2 = ((x_V < 10'd320) ? 1'b1 : 1'b0);

assign tmp_2_fu_125_p2 = ((x_V > 10'd320) ? 1'b1 : 1'b0);

assign tmp_3_fu_141_p2 = ((y_V > 10'd40) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_146_p1 = x_V;

assign tmp_6_fu_149_p2 = ((tmp_4_cast_fu_146_p1 > center_line_V) ? 1'b1 : 1'b0);

assign tmp_7_fu_154_p2 = ((tmp_4_cast_reg_194 < center_line_V) ? 1'b1 : 1'b0);

assign tmp_fu_96_p2 = ((y_V < 10'd40) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_4_cast_reg_194[11:10] <= 2'b00;
end

endmodule //Interface2
