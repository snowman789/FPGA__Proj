// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Interface2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.763500,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=22,HLS_SYN_LUT=114,HLS_VERSION=2018_3}" *)

module Interface2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        y_V,
        XY_Red_V,
        XY_Green_V,
        XY_Blue_V,
        lose,
        time_remaining_V,
        verify1,
        verify2,
        verify3
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] x_V;
input  [9:0] y_V;
output  [7:0] XY_Red_V;
output  [7:0] XY_Green_V;
output  [7:0] XY_Blue_V;
input   lose;
input  [9:0] time_remaining_V;
input   verify1;
input   verify2;
input   verify3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] XY_Red_V;
reg[7:0] XY_Green_V;
reg[7:0] XY_Blue_V;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] or_cond_fu_153_p2;
reg   [0:0] or_cond_reg_159;
wire   [7:0] storemerge2_fu_104_p3;
reg   [7:0] XY_Red_V_preg;
wire    ap_CS_fsm_state2;
wire   [7:0] storemerge1_cast_cas_fu_113_p3;
reg   [7:0] XY_Blue_V_preg;
wire   [7:0] storemerge_cast_fu_128_p3;
reg   [7:0] XY_Green_V_preg;
wire   [0:0] tmp_1_fu_98_p2;
wire   [0:0] not_tmp_1_fu_122_p2;
wire   [8:0] tmp_fu_94_p1;
wire   [9:0] tmp_3_cast_fu_137_p1;
wire   [0:0] tmp_4_fu_141_p2;
wire   [0:0] tmp_5_fu_147_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 XY_Red_V_preg = 8'd0;
#0 XY_Blue_V_preg = 8'd0;
#0 XY_Green_V_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                XY_Blue_V_preg[3] <= 1'b0;
        XY_Blue_V_preg[6] <= 1'b0;
        XY_Blue_V_preg[7] <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                        XY_Blue_V_preg[3] <= storemerge1_cast_cas_fu_113_p3[3];
            XY_Blue_V_preg[7 : 6] <= storemerge1_cast_cas_fu_113_p3[7 : 6];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        XY_Green_V_preg <= 8'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            XY_Green_V_preg <= storemerge_cast_fu_128_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        XY_Red_V_preg <= 8'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            XY_Red_V_preg <= storemerge2_fu_104_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        or_cond_reg_159 <= or_cond_fu_153_p2;
    end
end

always @ (*) begin
    if (((or_cond_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Blue_V = 8'd255;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Blue_V = storemerge1_cast_cas_fu_113_p3;
    end else begin
        XY_Blue_V = XY_Blue_V_preg;
    end
end

always @ (*) begin
    if (((or_cond_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Green_V = 8'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Green_V = storemerge_cast_fu_128_p3;
    end else begin
        XY_Green_V = XY_Green_V_preg;
    end
end

always @ (*) begin
    if (((or_cond_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        XY_Red_V = 8'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        XY_Red_V = storemerge2_fu_104_p3;
    end else begin
        XY_Red_V = XY_Red_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign not_tmp_1_fu_122_p2 = (tmp_1_fu_98_p2 ^ 1'd1);

assign or_cond_fu_153_p2 = (tmp_5_fu_147_p2 & tmp_4_fu_141_p2);

assign storemerge1_cast_cas_fu_113_p3 = ((tmp_1_fu_98_p2[0:0] === 1'b1) ? 8'd0 : 8'd200);

assign storemerge2_fu_104_p3 = ((tmp_1_fu_98_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign storemerge_cast_fu_128_p3 = ((not_tmp_1_fu_122_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp_1_fu_98_p2 = ((x_V > 10'd200) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_137_p1 = tmp_fu_94_p1;

assign tmp_4_fu_141_p2 = ((tmp_3_cast_fu_137_p1 > x_V) ? 1'b1 : 1'b0);

assign tmp_5_fu_147_p2 = ((y_V > 10'd100) ? 1'b1 : 1'b0);

assign tmp_fu_94_p1 = time_remaining_V[8:0];

always @ (posedge ap_clk) begin
    XY_Blue_V_preg[2:0] <= 3'b000;
    XY_Blue_V_preg[5:4] <= 2'b00;
end

endmodule //Interface2
