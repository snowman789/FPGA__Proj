// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Gamelogic2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=51,HLS_VERSION=2018_3}" *)

module Gamelogic2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rst,
        btn1,
        btn2,
        btn3,
        lose,
        time_remaining_out_V,
        verify1_out,
        verify2_out,
        verify3_out
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   rst;
input   btn1;
input   btn2;
input   btn3;
input   lose;
output  [9:0] time_remaining_out_V;
input   verify1_out;
input   verify2_out;
input   verify3_out;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] time_remaining_out_V;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] btn3_read_read_fu_42_p2;
wire   [0:0] btn1_read_read_fu_48_p2;
wire   [0:0] rst_read_read_fu_54_p2;
reg   [9:0] time_remaining_out_V_preg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 time_remaining_out_V_preg = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                time_remaining_out_V_preg[3] <= 1'b0;
        time_remaining_out_V_preg[4] <= 1'b0;
        time_remaining_out_V_preg[6] <= 1'b0;
        time_remaining_out_V_preg[7] <= 1'b0;
        time_remaining_out_V_preg[8] <= 1'b0;
    end else begin
        if (((btn1_read_read_fu_48_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                        time_remaining_out_V_preg[3] <= 1'b0;
            time_remaining_out_V_preg[4] <= 1'b1;
            time_remaining_out_V_preg[6] <= 1'b0;
            time_remaining_out_V_preg[7] <= 1'b1;
            time_remaining_out_V_preg[8] <= 1'b1;
        end else if (((ap_start == 1'b1) & (rst_read_read_fu_54_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                        time_remaining_out_V_preg[3] <= 1'b1;
            time_remaining_out_V_preg[4] <= 1'b0;
            time_remaining_out_V_preg[6] <= 1'b1;
            time_remaining_out_V_preg[7] <= 1'b1;
            time_remaining_out_V_preg[8] <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((btn3_read_read_fu_42_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        time_remaining_out_V = 10'd0;
    end else if (((btn1_read_read_fu_48_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        time_remaining_out_V = 10'd400;
    end else if (((ap_start == 1'b1) & (rst_read_read_fu_54_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        time_remaining_out_V = 10'd200;
    end else begin
        time_remaining_out_V = time_remaining_out_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign btn1_read_read_fu_48_p2 = btn1;

assign btn3_read_read_fu_42_p2 = btn3;

assign rst_read_read_fu_54_p2 = rst;

always @ (posedge ap_clk) begin
    time_remaining_out_V_preg[2:0] <= 3'b000;
    time_remaining_out_V_preg[5:5] <= 1'b0;
    time_remaining_out_V_preg[9] <= 1'b0;
end

endmodule //Gamelogic2
