-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gamelogic2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rst : IN STD_LOGIC;
    btn1 : IN STD_LOGIC;
    btn2 : IN STD_LOGIC;
    btn3 : IN STD_LOGIC;
    lose : OUT STD_LOGIC;
    time_remaining_out_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    time_remaining_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
    verify1_out : OUT STD_LOGIC;
    verify2_out : OUT STD_LOGIC;
    verify3_out : OUT STD_LOGIC );
end;


architecture behav of Gamelogic2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Gamelogic2,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.880875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1322,HLS_SYN_LUT=1454,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (103 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (103 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (103 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (103 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (103 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (103 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (103 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (103 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (103 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (103 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (103 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_989680 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100110001001011010000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal btn1_verify : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal btn2_verify : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal btn3_verify : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal decrement_value : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal newRound : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slow_down_clock : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal RandSeed : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    signal rst_read_read_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slow_down_clock_assi_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal newRound_load_load_fu_238_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal last_num_assign_1_reg_456 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_394_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal last_num_assign_2_reg_466 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_403_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal tmp_3_i1_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal tmp_3_i6_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_s_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_2_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond3_i_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_cast_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal verify1_out_preg : STD_LOGIC := '0';
    signal verify2_out_preg : STD_LOGIC := '0';
    signal verify3_out_preg : STD_LOGIC := '0';
    signal time_remaining_out_V_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_3_i_fu_232_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lose_preg : STD_LOGIC := '0';
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_218_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_fu_228_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_i_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_269_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_294_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i1_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_i_fu_360_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_i_fu_365_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_i_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_i_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_212_ap_start : STD_LOGIC;
    signal grp_fu_212_ap_done : STD_LOGIC;
    signal grp_fu_263_ap_start : STD_LOGIC;
    signal grp_fu_263_ap_done : STD_LOGIC;
    signal grp_fu_289_ap_start : STD_LOGIC;
    signal grp_fu_289_ap_done : STD_LOGIC;
    signal grp_fu_311_ap_start : STD_LOGIC;
    signal grp_fu_311_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (103 downto 0);

    component Gamelogic2_urem_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Gamelogic2_urem_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Gamelogic2_urem_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Gamelogic2_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Gamelogic2_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    Gamelogic2_urem_3bkb_U1 : component Gamelogic2_urem_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_212_ap_start,
        done => grp_fu_212_ap_done,
        din0 => grp_fu_212_p0,
        din1 => grp_fu_212_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p2);

    Gamelogic2_urem_3cud_U2 : component Gamelogic2_urem_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_263_ap_start,
        done => grp_fu_263_ap_done,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    Gamelogic2_urem_1dEe_U3 : component Gamelogic2_urem_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_289_ap_start,
        done => grp_fu_289_ap_done,
        din0 => grp_fu_394_p3,
        din1 => grp_fu_289_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    Gamelogic2_urem_1dEe_U4 : component Gamelogic2_urem_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_311_ap_start,
        done => grp_fu_311_ap_done,
        din0 => grp_fu_403_p3,
        din1 => grp_fu_311_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    Gamelogic2_mac_mueOg_U5 : component Gamelogic2_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        din2 => grp_fu_394_p2,
        dout => grp_fu_394_p3);

    Gamelogic2_mac_mufYi_U6 : component Gamelogic2_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_403_p0,
        din1 => grp_fu_403_p1,
        din2 => grp_fu_403_p2,
        dout => grp_fu_403_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lose_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    time_remaining_out_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                time_remaining_out_V_preg <= ap_const_lv10_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i_2_fu_222_p2 = ap_const_lv1_1))) then 
                    time_remaining_out_V_preg <= tmp_3_i_fu_232_p2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                    time_remaining_out_V_preg <= ap_const_lv10_280;
                end if; 
            end if;
        end if;
    end process;


    verify1_out_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                verify1_out_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    verify1_out_preg <= tmp_3_i1_fu_273_p2(0);
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    verify1_out_preg <= btn1_verify(0);
                end if; 
            end if;
        end if;
    end process;


    verify2_out_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                verify2_out_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                    verify2_out_preg <= tmp_3_i6_fu_298_p2(0);
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    verify2_out_preg <= btn2_verify(0);
                end if; 
            end if;
        end if;
    end process;


    verify3_out_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                verify3_out_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                    verify3_out_preg <= tmp_3_i2_fu_330_p2(0);
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    verify3_out_preg <= btn3_verify(0);
                end if; 
            end if;
        end if;
    end process;


    btn1_verify_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                btn1_verify <= tmp_3_i1_fu_273_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                btn1_verify <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    btn2_verify_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                btn2_verify <= tmp_3_i6_fu_298_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                btn2_verify <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    btn3_verify_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                btn3_verify <= tmp_3_i2_fu_330_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                btn3_verify <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    decrement_value_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                decrement_value <= tmp_s_fu_343_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                decrement_value <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    newRound_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                newRound <= not_or_cond3_i_fu_382_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (newRound_load_load_fu_238_p1 = ap_const_lv1_1))) then 
                newRound <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
                newRound <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                    RandSeed(10 downto 0) <= tmp_2_i_i_cast_fu_320_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                last_num_assign_1_reg_456 <= grp_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                last_num_assign_2_reg_466 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                slow_down_clock <= slow_down_clock_assi_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (newRound_load_load_fu_238_p1 = ap_const_lv1_1))) then
                tmp_i_i_reg_446 <= tmp_i_i_fu_246_p2;
            end if;
        end if;
    end process;
    RandSeed(31 downto 11) <= "000000000000000000000";
    lose_preg <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state37, newRound_load_load_fu_238_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (newRound_load_load_fu_238_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_done <= ap_const_logic_0;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;

    grp_fu_212_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_212_ap_start <= ap_const_logic_1;
        else 
            grp_fu_212_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_212_p0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(slow_down_clock));
    grp_fu_212_p1 <= ap_const_lv32_989680(25 - 1 downto 0);

    grp_fu_263_ap_start_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_263_ap_start <= ap_const_logic_1;
        else 
            grp_fu_263_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p0 <= std_logic_vector(unsigned(ap_const_lv32_64) + unsigned(tmp_i_i_reg_446));
    grp_fu_263_p1 <= ap_const_lv32_64(8 - 1 downto 0);

    grp_fu_289_ap_start_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_289_ap_start <= ap_const_logic_1;
        else 
            grp_fu_289_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p1 <= ap_const_lv11_64(8 - 1 downto 0);

    grp_fu_311_ap_start_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_311_ap_start <= ap_const_logic_1;
        else 
            grp_fu_311_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_311_p1 <= ap_const_lv11_64(8 - 1 downto 0);
    grp_fu_394_p0 <= ap_const_lv11_D(5 - 1 downto 0);
    grp_fu_394_p1 <= last_num_assign_1_reg_456(11 - 1 downto 0);
    grp_fu_394_p2 <= ap_const_lv11_64(8 - 1 downto 0);
    grp_fu_403_p0 <= ap_const_lv11_D(5 - 1 downto 0);
    grp_fu_403_p1 <= last_num_assign_2_reg_466(8 - 1 downto 0);
    grp_fu_403_p2 <= ap_const_lv11_64(8 - 1 downto 0);

    lose_assign_proc : process(rst_read_read_fu_104_p2, ap_CS_fsm_state2, ap_CS_fsm_state104, lose_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1)))) then 
            lose <= ap_const_logic_0;
        else 
            lose <= lose_preg;
        end if; 
    end process;

    newRound_load_load_fu_238_p1 <= newRound;
    not_or_cond3_i_fu_382_p2 <= (or_cond3_i_fu_376_p2 xor ap_const_lv1_1);
    or_cond3_i_fu_376_p2 <= (tmp_i1_fu_355_p2 or tmp_fu_370_p2);
    rst_read_read_fu_104_p2 <= (0=>rst, others=>'-');
    slow_down_clock_assi_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(slow_down_clock));

    time_remaining_out_V_assign_proc : process(rst_read_read_fu_104_p2, ap_CS_fsm_state2, ap_CS_fsm_state37, tmp_i_2_fu_222_p2, time_remaining_out_V_preg, tmp_3_i_fu_232_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i_2_fu_222_p2 = ap_const_lv1_1))) then 
            time_remaining_out_V <= tmp_3_i_fu_232_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (rst_read_read_fu_104_p2 = ap_const_lv1_1))) then 
            time_remaining_out_V <= ap_const_lv10_280;
        else 
            time_remaining_out_V <= time_remaining_out_V_preg;
        end if; 
    end process;

    tmp1_i_fu_360_p1 <= (0=>btn2, others=>'-');
    tmp1_i_fu_360_p2 <= (tmp1_i_fu_360_p1 xor btn2_verify);
    tmp2_i_fu_365_p1 <= (0=>btn3, others=>'-');
    tmp2_i_fu_365_p2 <= (tmp2_i_fu_365_p1 xor btn3_verify);
    tmp_1_fu_218_p1 <= grp_fu_212_p2(25 - 1 downto 0);
    tmp_2_fu_228_p1 <= decrement_value(10 - 1 downto 0);
    tmp_2_i_i_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_311_p2),32));
    tmp_3_i1_fu_273_p2 <= "1" when (unsigned(tmp_4_fu_269_p1) > unsigned(ap_const_lv7_32)) else "0";
    tmp_3_i2_fu_330_p2 <= "1" when (unsigned(tmp_6_fu_316_p1) > unsigned(ap_const_lv7_32)) else "0";
    tmp_3_i6_fu_298_p2 <= "1" when (unsigned(tmp_5_fu_294_p1) > unsigned(ap_const_lv7_32)) else "0";
    tmp_3_i_fu_232_p2 <= std_logic_vector(unsigned(time_remaining_in_V) - unsigned(tmp_2_fu_228_p1));
    tmp_4_fu_269_p1 <= grp_fu_263_p2(7 - 1 downto 0);
    tmp_5_fu_294_p1 <= grp_fu_289_p2(7 - 1 downto 0);
    tmp_6_fu_316_p1 <= grp_fu_311_p2(7 - 1 downto 0);
    tmp_fu_370_p2 <= (tmp2_i_fu_365_p2 or tmp1_i_fu_360_p2);
    tmp_i1_fu_355_p1 <= (0=>btn1, others=>'-');
    tmp_i1_fu_355_p2 <= (tmp_i1_fu_355_p1 xor btn1_verify);
    tmp_i_2_fu_222_p2 <= "1" when (tmp_1_fu_218_p1 = ap_const_lv25_0) else "0";
    tmp_i_i_fu_246_p1 <= RandSeed;
    tmp_i_i_fu_246_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_D) * signed(tmp_i_i_fu_246_p1))), 32));
    tmp_s_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(decrement_value));

    verify1_out_assign_proc : process(btn1_verify, ap_CS_fsm_state2, ap_CS_fsm_state73, tmp_3_i1_fu_273_p2, verify1_out_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            verify1_out <= tmp_3_i1_fu_273_p2(0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            verify1_out <= btn1_verify(0);
        else 
            verify1_out <= verify1_out_preg;
        end if; 
    end process;


    verify2_out_assign_proc : process(btn2_verify, ap_CS_fsm_state2, ap_CS_fsm_state88, tmp_3_i6_fu_298_p2, verify2_out_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            verify2_out <= tmp_3_i6_fu_298_p2(0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            verify2_out <= btn2_verify(0);
        else 
            verify2_out <= verify2_out_preg;
        end if; 
    end process;


    verify3_out_assign_proc : process(btn3_verify, ap_CS_fsm_state2, tmp_3_i2_fu_330_p2, ap_CS_fsm_state103, verify3_out_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            verify3_out <= tmp_3_i2_fu_330_p2(0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            verify3_out <= btn3_verify(0);
        else 
            verify3_out <= verify3_out_preg;
        end if; 
    end process;

end behav;
